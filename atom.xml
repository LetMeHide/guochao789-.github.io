<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wawawaaw.top/"/>
  <updated>2019-07-31T07:00:04.290Z</updated>
  <id>http://wawawaaw.top/</id>
  
  <author>
    <name>Guo Chao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>第一篇博客，记录一下vscode+hexo的一些配置（坑）</title>
    <link href="http://wawawaaw.top/2019/07/22/my-first-hexo-blog/"/>
    <id>http://wawawaaw.top/2019/07/22/my-first-hexo-blog/</id>
    <published>2019-07-22T09:04:19.000Z</published>
    <updated>2019-07-31T07:00:04.290Z</updated>
    
    <content type="html"><![CDATA[<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>1.安装git、node.js<br>2.在Github新建一个仓库，格式：账户名.github.io命名，在仓库的Settings里面GitHub Pages这一栏可以看到访问网址，可以点击下试着访问<br>   <img src="/2019/07/22/my-first-hexo-blog/2019-07-25-11-05-26.png" title="my-first-hexo-blog"><br>3.如果自己有域名的话可以绑定一下，ping一下上面那个网址的ip地址，可以用A记录解析，指向ip地址，也可以用CNAME指向的是 账户名.github.io这个，绑定好域名之后在仓库里面添加一个CNAME文件，写入自己的域名，不加www，这样的话访问网址也可以不加www直接访问</p><img src="/2019/07/22/my-first-hexo-blog/2019-07-25-15-09-41.png" title="my-first-hexo-blog"><h3 id="Hexo配置"><a href="#Hexo配置" class="headerlink" title="Hexo配置"></a>Hexo配置</h3><p>1.安装Hexo<br>新建一个放Hexo项目的文件夹，Shift+鼠标右键打开git bash 命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo //安装hexo</span><br></pre></td></tr></table></figure><p>2.对hexo初始化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init //hexo初始化</span><br></pre></td></tr></table></figure><p>3.执行下面语句会生成public文件，这个文件就是以后上传到github的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean //在生成之前使用下清理命令会好一些</span><br><span class="line">hexo g //生成</span><br></pre></td></tr></table></figure><p>4.执行启动服务语句启动服务然后复制下链接本地预览下页面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s //启动服务</span><br></pre></td></tr></table></figure><p>5._config.yml配置文件，文件最下面修改，repository是自己仓库的地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:LetMeHide/guochao789-.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>6.安装一个插件，不然会报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>7.使用下面命令把生成的文件提交到github</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>8.如果要hexo修改主题，先去官方网站<a href="https://hexo.io/themes" target="_blank" rel="noopener">https://hexo.io/themes</a>下载好，放到themes文件夹，在_config.yml配置文件中把 theme: landscape 改为 theme: 主题文件名就ok了</p><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>1.一些要保留的文件如CNAME要把他们放到source文件，不然一上传就没了<br>2.文件.gitignore说明了上传时该忽略的文件<br>3.常见命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">"postName"</span> <span class="comment">#新建文章</span></span><br><span class="line">hexo new page <span class="string">"pageName"</span> <span class="comment">#新建页面</span></span><br><span class="line">hexo generate <span class="comment">#生成静态页面至public目录</span></span><br><span class="line">hexo server <span class="comment">#开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span></span><br><span class="line">hexo deploy <span class="comment">#部署到GitHub</span></span><br><span class="line">hexo <span class="built_in">help</span>  <span class="comment"># 查看帮助</span></span><br><span class="line">hexo version  <span class="comment">#查看Hexo的版本</span></span><br></pre></td></tr></table></figure><h3 id="vscode配置"><a href="#vscode配置" class="headerlink" title="vscode配置"></a>vscode配置</h3><p>1.Markdow Preview Enhanced 插件<br>这个插件可以实现md文件的预览以及图片复制粘贴，安装完之后在vscode右上角会有一个预览的标志<img src="/2019/07/22/my-first-hexo-blog/2019-07-26-11-59-26.png" title="my-first-hexo-blog"><br>点击一下就可以预览了，这个也可以实现图片的插入，这里我没有用这个功能。<br>2.Paste Image 插件（实现在vscode里面粘贴图片）<br>插入图片之前要在_config.yml文件中修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post_asset_folder: true  //默认是false，改为true就行了</span><br></pre></td></tr></table></figure><p>url改成自己的域名</p><img src="/2019/07/22/my-first-hexo-blog/2019-07-29-14-29-42.png" title="my-first-hexo-blog"><p>安装一个图片转换路径的插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install https://github.com/CodeFalling/hexo-asset-image --save</span><br></pre></td></tr></table></figure><p>打开/node_modules/hexo-asset-image/index.js，将内容更换为下面的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPosition</span>(<span class="params">str, m, i</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> version = <span class="built_in">String</span>(hexo.version).split(<span class="string">'.'</span>);</span><br><span class="line">hexo.extend.filter.register(<span class="string">'after_post_render'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = hexo.config;</span><br><span class="line">  <span class="keyword">if</span>(config.post_asset_folder)&#123;</span><br><span class="line">      <span class="keyword">var</span> link = data.permalink;</span><br><span class="line">      <span class="keyword">if</span>(version.length &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">Number</span>(version[<span class="number">0</span>]) == <span class="number">3</span>)</span><br><span class="line">         <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">'/'</span>, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">         <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">'/'</span>, <span class="number">3</span>) + <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">var</span> endPos = link.lastIndexOf(<span class="string">'/'</span>) + <span class="number">1</span>;</span><br><span class="line">      link = link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> toprocess = [<span class="string">'excerpt'</span>, <span class="string">'more'</span>, <span class="string">'content'</span>];</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">         <span class="keyword">var</span> key = toprocess[i];</span><br><span class="line">         <span class="keyword">var</span> $ = cheerio.load(data[key], &#123;</span><br><span class="line">         ignoreWhitespace: <span class="literal">false</span>,</span><br><span class="line">         xmlMode: <span class="literal">false</span>,</span><br><span class="line">         lowerCaseTags: <span class="literal">false</span>,</span><br><span class="line">         decodeEntities: <span class="literal">false</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">'img'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="keyword">if</span> ($(<span class="keyword">this</span>).attr(<span class="string">'src'</span>))&#123;</span><br><span class="line">         <span class="comment">// For windows style path, we replace '\' to '/'.</span></span><br><span class="line">         <span class="keyword">var</span> src = $(<span class="keyword">this</span>).attr(<span class="string">'src'</span>).replace(<span class="string">'\\'</span>, <span class="string">'/'</span>);</span><br><span class="line">         <span class="keyword">if</span>(!<span class="regexp">/http[s]*.*|\/\/.*/</span>.test(src) &amp;&amp;!<span class="regexp">/^\s*\//</span>.test(src)) &#123;</span><br><span class="line">            <span class="keyword">var</span> linkArray = link.split(<span class="string">'/'</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> elem != <span class="string">''</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">var</span> srcArray = src.split(<span class="string">'/'</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> elem != <span class="string">''</span> &amp;&amp; elem != <span class="string">'.'</span>;</span><br><span class="line">             &#125;);</span><br><span class="line">            <span class="keyword">if</span>(srcArray.length &gt; <span class="number">1</span>)</span><br><span class="line">               srcArray.shift();</span><br><span class="line">            src = srcArray.join(<span class="string">'/'</span>);</span><br><span class="line">             $(<span class="keyword">this</span>).attr(<span class="string">'src'</span>, config.root + link + src);</span><br><span class="line">            <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"update link as:--&gt;"</span>+config.root + link + src);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"no src attr, skipped..."</span>);</span><br><span class="line">         <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info($(<span class="keyword">this</span>));</span><br><span class="line">      &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      data[key] = $.html();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>不然生成的时候路径会不对，虽然图片上传成功但是取的路径不对，无法显示图片</p><p>下载好Paste Image插件后需要配置两个地方，文件-&gt;首选项-&gt;设置，在输入框搜索Paste Image</p><img src="/2019/07/22/my-first-hexo-blog/2019-07-26-17-11-47.png" title="my-first-hexo-blog"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Paste Image :Path  //粘贴文件时复制的目标目录</span><br><span class="line">Pates Image: Insert Pattern  //将粘贴到文本的字符串模式，也就是在md的显示格式</span><br><span class="line"><span class="variable">$&#123;currentFileNameWithoutExt&#125;</span>/  //当前文件名没有ext(后缀名)</span><br><span class="line"><span class="variable">$&#123;imageFileName&#125;</span>  //带有ext的图像文件名</span><br></pre></td></tr></table></figure><p>截图工具（qq截图这些都可以）截好图之后，只需要在代码里面按crtl+alt+v就可以把图片复制在./source/_posts/博客名 文件下面，如果文件名不存在，它会自己新建一个。</p><p>注意：当你打开文章资源文件夹功能后，你把一个 example.jpg 图片放在了你的资源文件夹中，如果通过使用相对路径的常规 markdown 语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](/example.jpg)</span><br></pre></td></tr></table></figure><p>，它将不会出现在首页上（但是它会在文章中按你期待的方式工作），也就是说在存档页和主页不能使用和文章内容中的常规语法来引用图片，复制完图片后图片的路径大概是这种格式，这也是hexo支持的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_img example.jpg This is an example image %&#125;</span><br></pre></td></tr></table></figure><p>上面的各种配置就是为了能让图片在vscode正常的复制粘贴当正确的路径，并且能够以这种格式写在md文档中，但是Markdow Preview Enhanced 插件预览不了类似这种的写法的图片，要是想在预览中也显示图片的话，ctrl+shift+p打开命令面板,输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MarkdownPreview Enhanced:Extend Parser</span><br></pre></td></tr></table></figure><img src="/2019/07/22/my-first-hexo-blog/2019-07-29-14-05-33.png" title="my-first-hexo-blog"><p>点进去之后可以看到parser.js文件，修改一下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  onWillParseMarkdown: <span class="function"><span class="keyword">function</span>(<span class="params">markdown</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span> &#123;</span><br><span class="line">      markdown = markdown.replace(</span><br><span class="line">        /\&#123;%\s*asset_img\s*(.*)\s*%\&#125;/g,</span><br><span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params">whole,content</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">var</span> picFileName = whole.match(<span class="regexp">/(?&lt;=\&#123;%\s.+\s.+\s).*?(?=\s%)/</span>);<span class="comment">//图片文件夹（和文章名称一致）名称</span></span><br><span class="line">          <span class="keyword">var</span> picName = whole.match(<span class="regexp">/(?&lt;=\&#123;%\s.+\s).*?(?=\s.*\s%)/</span>);<span class="comment">//图片名称（也可以随便给个值，为空的话代码会有警告）</span></span><br><span class="line">          <span class="keyword">return</span> <span class="string">`![<span class="subst">$&#123;picName&#125;</span>](/source/_posts/<span class="subst">$&#123;picFileName&#125;</span>/<span class="subst">$&#123;picName&#125;</span>)`</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line">      <span class="keyword">return</span> resolve(markdown)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  onDidParseMarkdown: <span class="function"><span class="keyword">function</span>(<span class="params">html</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> resolve(html)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://marketplace.visualstudio.com/items?itemName=mushan.vscode-paste-image" target="_blank" rel="noopener">Paste Image 插件的配置文档链接</a></p><p><a href="https://www.jianshu.com/p/9f0e90cc32c2" target="_blank" rel="noopener">hexo 界面优化</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h3&gt;&lt;p&gt;1.安装git、node.js&lt;br&gt;2.在Github新建一个仓库，格式：账户名.github.io命名，在仓库的Sett
      
    
    </summary>
    
      <category term="web前端" scheme="http://wawawaaw.top/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="jQuery" scheme="http://wawawaaw.top/tags/jQuery/"/>
    
      <category term="表格" scheme="http://wawawaaw.top/tags/%E8%A1%A8%E6%A0%BC/"/>
    
      <category term="表单验证" scheme="http://wawawaaw.top/tags/%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/"/>
    
  </entry>
  
</feed>
